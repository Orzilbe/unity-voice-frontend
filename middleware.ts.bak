// apps/web/src/middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // Get the token from cookies or localStorage
  const token = request.cookies.get('auth_token')?.value || 
                request.headers.get('authorization')?.split(' ')[1];

  // Define protected and auth routes
  const protectedRoutes = ['/topics', '/profile', '/dashboard'];
  const authRoutes = ['/login', '/signup'];

  // Check if the current path is a protected route
  const isProtectedRoute = protectedRoutes.some(route => 
    request.nextUrl.pathname.startsWith(route)
  );

  const isAuthRoute = authRoutes.some(route => 
    request.nextUrl.pathname.startsWith(route)
  );

  // If no token exists and trying to access a protected route, redirect to login
  if (isProtectedRoute && !token) {
    return NextResponse.redirect(new URL('/login', request.url));
  }

  // If logged in and trying to access login/signup, redirect to topics
  if (isAuthRoute && token) {
    return NextResponse.redirect(new URL('/topics', request.url));
  }

  return NextResponse.next();
}
export const config = {
  matcher: ['/topics/:path*', '/login', '/signup', '/profile', '/((?!_next/static|_next/image|favicon.ico).*)', '/api/:path*']
}