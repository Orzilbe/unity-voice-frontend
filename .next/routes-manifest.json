{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/api/create-post/[topicName]",
      "regex": "^/api/create\\-post/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtopicName": "nxtPtopicName"
      },
      "namedRegex": "^/api/create\\-post/(?<nxtPtopicName>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/posts/regenerate/[taskId]",
      "regex": "^/api/posts/regenerate/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtaskId": "nxtPtaskId"
      },
      "namedRegex": "^/api/posts/regenerate/(?<nxtPtaskId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/posts/verify/[postId]",
      "regex": "^/api/posts/verify/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPpostId": "nxtPpostId"
      },
      "namedRegex": "^/api/posts/verify/(?<nxtPpostId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/posts/[taskId]",
      "regex": "^/api/posts/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtaskId": "nxtPtaskId"
      },
      "namedRegex": "^/api/posts/(?<nxtPtaskId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/question/[questionId]",
      "regex": "^/api/question/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPquestionId": "nxtPquestionId"
      },
      "namedRegex": "^/api/question/(?<nxtPquestionId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/topics/[topicName]/tasks/conversation",
      "regex": "^/topics/([^/]+?)/tasks/conversation(?:/)?$",
      "routeKeys": {
        "nxtPtopicName": "nxtPtopicName"
      },
      "namedRegex": "^/topics/(?<nxtPtopicName>[^/]+?)/tasks/conversation(?:/)?$"
    },
    {
      "page": "/topics/[topicName]/tasks/flashcard",
      "regex": "^/topics/([^/]+?)/tasks/flashcard(?:/)?$",
      "routeKeys": {
        "nxtPtopicName": "nxtPtopicName"
      },
      "namedRegex": "^/topics/(?<nxtPtopicName>[^/]+?)/tasks/flashcard(?:/)?$"
    },
    {
      "page": "/topics/[topicName]/tasks/post",
      "regex": "^/topics/([^/]+?)/tasks/post(?:/)?$",
      "routeKeys": {
        "nxtPtopicName": "nxtPtopicName"
      },
      "namedRegex": "^/topics/(?<nxtPtopicName>[^/]+?)/tasks/post(?:/)?$"
    },
    {
      "page": "/topics/[topicName]/tasks/quiz",
      "regex": "^/topics/([^/]+?)/tasks/quiz(?:/)?$",
      "routeKeys": {
        "nxtPtopicName": "nxtPtopicName"
      },
      "namedRegex": "^/topics/(?<nxtPtopicName>[^/]+?)/tasks/quiz(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/edit-profile",
      "regex": "^/edit\\-profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/edit\\-profile(?:/)?$"
    },
    {
      "page": "/hall-of-fame",
      "regex": "^/hall\\-of\\-fame(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/hall\\-of\\-fame(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/signup",
      "regex": "^/signup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/signup(?:/)?$"
    },
    {
      "page": "/topics",
      "regex": "^/topics(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/topics(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}