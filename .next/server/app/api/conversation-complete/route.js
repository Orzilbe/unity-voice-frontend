(()=>{var e={};e.id=6593,e.ids=[6593],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},19771:e=>{"use strict";e.exports=require("process")},27910:e=>{"use strict";e.exports=require("stream")},28303:e=>{function t(e){var t=Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=28303,e.exports=t},28354:e=>{"use strict";e.exports=require("util")},29021:e=>{"use strict";e.exports=require("fs")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:e=>{"use strict";e.exports=require("path")},34631:e=>{"use strict";e.exports=require("tls")},39466:(e,t,r)=>{"use strict";let o=process.env.NEXT_PUBLIC_API_URL;async function s(e){let t=e.headers.get("content-type");if(console.log(`Response status: ${e.status}, Content-Type: ${t}`),t&&t.includes("application/json"))try{let t=await e.json();if(!e.ok){let r={status:e.status,statusText:e.statusText,message:t.message||t.error||"API request failed",responseData:t,url:e.url};throw console.error("API Error (JSON):",r),r}return t}catch(t){if(!e.ok){let r={status:e.status,statusText:e.statusText,message:`Failed to parse JSON response: ${t}`,responseData:null,url:e.url};throw console.error("API Error (JSON Parse Failed):",r),r}throw t}try{let t=await e.text();if(console.log(`Response text (first 200 chars): ${t.substring(0,200)}`),!e.ok){let r={status:e.status,statusText:e.statusText,message:t||"API request failed",responseData:t,url:e.url};throw console.error("API Error (Text):",r),r}return t}catch(r){let t={status:e.status,statusText:e.statusText,message:`Failed to read response: ${r}`,responseData:null,url:e.url};throw console.error("API Error (Text Read Failed):",t),t}}async function n(e,t={}){let r={"Content-Type":"application/json",...t.headers},a=`${o}${e}`;console.log(`Making API call to: ${a}`);try{let e=await fetch(a,{...t,headers:r,credentials:"include"});return await s(e)}catch(t){throw console.error(`API call failed for ${e}:`,{url:a,error:t,errorMessage:t instanceof Error?t.message:"Unknown error",errorStack:t instanceof Error?t.stack:void 0,headers:r}),t&&"object"==typeof t&&(t.endpoint=e,t.fullUrl=a),t}}},41204:e=>{"use strict";e.exports=require("string_decoder")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},56285:(e,t,r)=>{"use strict";r.d(t,{KP:()=>p});var o=r(46101),s=r(29021),n=r.n(s),a=r(33873),l=r.n(a);let c=null,i=0,u={host:process.env.MYSQL_HOST||"localhost",user:process.env.MYSQL_USER||"root",password:process.env.MYSQL_PASSWORD||"",database:process.env.MYSQL_DATABASE||"unityvoice",port:parseInt(process.env.MYSQL_PORT||"3306"),ssl:"true"===process.env.MYSQL_SSL};async function d(){if(c)return c;try{let e;i++;let t=l().join(process.cwd(),"src/config/DigiCertGlobalRootCA.crt.pem");n().existsSync(t)?(console.log(`SSL certificate found at: ${t}`),e=n().readFileSync(t)):console.log("SSL certificate not found, using default SSL configuration"),console.log(`[${new Date().toISOString()}] Database configuration:`,{host:u.host,user:u.user,database:u.database,port:u.port,ssl:u.ssl,passwordProvided:!!u.password,environment:"production"}),u.host&&u.user||console.error("CRITICAL: Missing essential database credentials (host or user)"),u.password||console.error("CRITICAL: No database password provided - connection will likely fail"),console.log(`[${new Date().toISOString()}] Attempting to connect to MySQL database (attempt ${i}/3)`);let r={host:u.host,user:u.user,password:u.password,database:u.database,port:u.port,ssl:u.ssl?e?{ca:e,rejectUnauthorized:!1}:{rejectUnauthorized:!1}:void 0,waitForConnections:!0,connectionLimit:10,queueLimit:0,connectTimeout:1e4};c=o.createPool(r);let s=await c.getConnection();return console.log(`[${new Date().toISOString()}] Successfully connected to MySQL database`),s.release(),i=0,c}catch(t){let e=t instanceof Error?t.message:String(t);if(console.error(`[${new Date().toISOString()}] Failed to connect to MySQL database:`,e),console.error("Database connection error details:",t),console.error("Environment context:",{NODE_ENV:"production",cwd:process.cwd(),MYSQL_HOST_set:!!process.env.MYSQL_HOST,MYSQL_USER_set:!!process.env.MYSQL_USER,MYSQL_DATABASE_set:!!process.env.MYSQL_DATABASE,MYSQL_PASSWORD_set:!!process.env.MYSQL_PASSWORD}),i<3)return console.log("Retrying database connection in 3 seconds..."),await new Promise(e=>setTimeout(e,3e3)),d();throw i=0,Error(`Database connection failed: ${e}`)}}async function p(){try{return await d()}catch(e){return console.error("Database connection failed, returning null:",e),null}}},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},66136:e=>{"use strict";e.exports=require("timers")},74075:e=>{"use strict";e.exports=require("zlib")},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},79551:e=>{"use strict";e.exports=require("url")},80935:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>h,routeModule:()=>E,serverHooks:()=>m,workAsyncStorage:()=>w,workUnitAsyncStorage:()=>T});var o={};r.r(o),r.d(o,{POST:()=>v});var s=r(96559),n=r(48088),a=r(37719),l=r(32190),c=r(43205),i=r.n(c);r(39466);var u=r(56285);async function d(e,t,r){try{let[o]=await e.query("SELECT 1 FROM levels WHERE TopicName = ? AND Level = ?",[t,r]);if(!Array.isArray(o)||0===o.length){console.warn(`Level ${r} for topic ${t} does not exist`);let[o]=await e.query("SHOW COLUMNS FROM levels");if(o.length<2)return console.error("Invalid levels table structure"),!1;let s="INSERT INTO levels (TopicName, Level",n="VALUES (?, ?",a=[t,r];if(o.length>=3){let e=o[2].Field;s+=`, ${e}`,n+=", ?",a.push(150)}s+=") "+n+")";try{await e.query(s,a),console.log(`Created level ${r} for topic ${t}`)}catch(e){return console.error("Failed to create level:",e),!1}}return!0}catch(e){return console.error("Error checking level existence:",e),!1}}async function p(e,t,r){console.group(`Handling conversation task completion for userId=${e}, taskId=${t}, score=${r}`);try{let r=await (0,u.KP)();if(!r)return console.error("Cannot connect to database"),console.groupEnd(),!1;let o=await r.getConnection();await o.beginTransaction();try{let[r]=await o.query("SELECT TopicName, Level FROM tasks WHERE TaskId = ? AND UserId = ?",[t,e]);if(!Array.isArray(r)||0===r.length)return console.error(`Task ${t} not found for user ${e}`),await o.rollback(),console.groupEnd(),!1;let{TopicName:s,Level:n}=r[0];console.log(`Found task with topic: ${s}, level: ${n}`);let[a]=await o.query("SELECT Id, Level FROM userinlevel WHERE UserId = ? AND TopicName = ? AND CompletedAt IS NULL",[e,s]);if(!Array.isArray(a)||0===a.length){console.warn(`No open user level record found for user ${e}, topic ${s}. Creating new one.`),await o.query("INSERT INTO userinlevel (UserId, TopicName, Level, EarnedScore, CompletedAt) VALUES (?, ?, ?, 0, NULL)",[e,s,n]);let[t]=await o.query("SELECT Id, Level FROM userinlevel WHERE UserId = ? AND TopicName = ? AND CompletedAt IS NULL",[e,s]);if(!Array.isArray(t)||0===t.length)return console.error("Failed to create new user level record"),await o.rollback(),console.groupEnd(),!1;a[0]=t[0],console.log(`Created new user level record with ID: ${a[0].Id}`)}let l=a[0].Id,c=a[0].Level;console.log(`Found user level record with ID: ${l}, level: ${c}`);let[i]=await o.query("SELECT SUM(TaskScore) AS TotalScore FROM tasks WHERE UserId = ? AND TopicName = ? AND Level = ?",[e,s,c]),u=i[0]?.TotalScore||0;console.log(`Calculated total score for level ${c}: ${u}`);let d=new Date().toISOString().slice(0,19).replace("T"," ");await o.query("UPDATE userinlevel SET CompletedAt = ?, EarnedScore = ? WHERE Id = ?",[d,u,l]),console.log(`Updated user level ${l} with completion date and total score ${u}`);let p=c+1;return await o.query("INSERT INTO userinlevel (UserId, TopicName, Level, EarnedScore, CompletedAt) VALUES (?, ?, ?, 0, NULL)",[e,s,p]),console.log(`Created new user level record for level ${p}`),await o.commit(),console.log("Successfully completed all operations"),console.groupEnd(),!0}catch(e){return await o.rollback(),console.error("Error in transaction:",e),console.groupEnd(),!1}finally{o.release()}}catch(e){return console.error("General error handling conversation task completion:",e),console.groupEnd(),!1}}async function g(e,t,r){console.group(`Updating task ${e} with score ${t} and duration ${r}`);try{let o=await (0,u.KP)();if(!o)return console.error("Cannot connect to database"),console.groupEnd(),!1;try{let s=new Date().toISOString().slice(0,19).replace("T"," "),[n]=await o.query("UPDATE tasks SET CompletionDate = ?, TaskScore = ?, DurationTask = ? WHERE TaskId = ?",[s,t,r,e]),a=n.affectedRows||0;if(console.log(`Update result: ${a} rows affected`),a>0)return console.log(`Successfully updated task ${e}`),console.groupEnd(),!0;console.log("Attempting case-insensitive update");let[l]=await o.query("UPDATE tasks SET CompletionDate = ?, TaskScore = ?, DurationTask = ? WHERE LOWER(TaskId) = LOWER(?)",[s,t,r,e]),c=l.affectedRows||0;if(console.log(`Case-insensitive update result: ${c} rows affected`),c>0)return console.log("Successfully updated task with case-insensitive match"),console.groupEnd(),!0;return console.warn(`No rows affected when updating task ${e}, even with case-insensitive match`),console.groupEnd(),!1}catch(e){return console.error("Error in database operation:",e),console.groupEnd(),!1}}catch(e){return console.error("Error updating task with duration:",e),console.groupEnd(),!1}}async function S(e,t){console.log(`Marking task ${e} as completed with score ${t}`);try{let r=await (0,u.KP)();if(!r)return console.error("Cannot connect to database"),!1;let o=new Date().toISOString().slice(0,19).replace("T"," ");try{let[s]=await r.query("SELECT TaskId, UserId, TopicName, Level, TaskType, StartDate FROM tasks WHERE TaskId = ?",[e]);if(0===s.length)return console.error(`Task ${e} not found`),!1;let n=s[0],{UserId:a,TaskType:l}=n,c=null;if(n.StartDate){let e=new Date(n.StartDate),t=new Date(o);c=Math.floor((t.getTime()-e.getTime())/1e3)}let i=await r.query("UPDATE tasks SET CompletionDate = ?, TaskScore = ?, DurationTask = ? WHERE TaskId = ?",[o,t,c,e]);return console.log("Task update result:",i),"conversation"===l&&(console.log("This is a conversation task, handling level progression"),await p(a,e,t)||console.warn(`Failed to update user level progression for task ${e}`)),!0}catch(e){return console.error("Error updating task:",e),!1}}catch(e){return console.error("General error marking task as completed:",e),!1}}async function f(e){try{let t=process.env.JWT_SECRET||"default_secret_key",r=i().verify(e,t);return{userId:r.userId||r.id||""}}catch(e){return console.error("Error verifying token:",e),null}}async function v(e){console.group("POST /api/conversation-complete - Handling conversation task completion");try{let t,r=e.headers.get("authorization");if(!r)return console.error("Authentication header missing"),console.groupEnd(),l.NextResponse.json({success:!1,message:"Authentication required"},{status:401});let o=r.replace("Bearer ",""),s=await f(o);if(!s||!s.userId)return console.error("Invalid authentication token"),console.groupEnd(),l.NextResponse.json({success:!1,message:"Invalid authentication"},{status:401});let{taskId:n,score:a,duration:c}=await e.json();if(!n)return console.error("Task ID missing in request"),console.groupEnd(),l.NextResponse.json({success:!1,message:"Missing required field: taskId"},{status:400});if(console.log(`Processing conversation task completion: userId=${s.userId}, taskId=${n}, score=${a}`),void 0!==c?(console.log(`Using updateTaskWithDuration with duration ${c}s`),t=await g(n,a||0,c)):(console.log("Using standard markTaskComplete"),t=await S(n,a||0)),!t)return console.error(`Failed to update task ${n}`),console.groupEnd(),l.NextResponse.json({success:!1,message:"Failed to update task"},{status:500});if(!await p(s.userId,n,a||0))return console.warn(`Task updated but user level progression failed for task ${n}`),console.groupEnd(),l.NextResponse.json({success:!0,partialSuccess:!0,message:"Task completed but user level update failed",data:{taskId:n}});return console.log("Task and user level updated successfully"),console.groupEnd(),l.NextResponse.json({success:!0,message:"Conversation task completed and user level updated",data:{taskId:n}})}catch(e){return console.error("Error in conversation-complete API:",e),console.groupEnd(),l.NextResponse.json({success:!1,message:"Server error",error:e.message},{status:500})}}let E=new s.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/conversation-complete/route",pathname:"/api/conversation-complete",filename:"route",bundlePath:"app/api/conversation-complete/route"},resolvedPagePath:"C:\\Users\\orzil\\OneDrive\\שולחן העבודה\\070525\\unity-voice-frontend-1\\src\\app\\api\\conversation-complete\\route.ts",nextConfigOutput:"",userland:o}),{workAsyncStorage:w,workUnitAsyncStorage:T,serverHooks:m}=E;function h(){return(0,a.patchFetch)({workAsyncStorage:w,workUnitAsyncStorage:T})}},91645:e=>{"use strict";e.exports=require("net")},94735:e=>{"use strict";e.exports=require("events")},96487:()=>{}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[7719,580,3205,6101],()=>r(80935));module.exports=o})();