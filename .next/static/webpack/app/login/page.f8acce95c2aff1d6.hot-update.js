"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./src/config/api.ts":
/*!***************************!*\
  !*** ./src/config/api.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authEndpoints: () => (/* binding */ authEndpoints),\n/* harmony export */   authenticatedApiCall: () => (/* binding */ authenticatedApiCall),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   flashcardEndpoints: () => (/* binding */ flashcardEndpoints),\n/* harmony export */   healthCheck: () => (/* binding */ healthCheck),\n/* harmony export */   taskEndpoints: () => (/* binding */ taskEndpoints),\n/* harmony export */   topicsEndpoints: () => (/* binding */ topicsEndpoints),\n/* harmony export */   userEndpoints: () => (/* binding */ userEndpoints),\n/* harmony export */   wordsEndpoints: () => (/* binding */ wordsEndpoints)\n/* harmony export */ });\n// unity-voice-frontend/src/config/api.ts\nconst API_URL = \"http://localhost:5000/api\" || 0;\nconsole.log('🔧 API Configuration:', {\n    NEXT_PUBLIC_API_URL: \"http://localhost:5000/api\",\n    API_URL: API_URL,\n    NODE_ENV: \"development\"\n});\n// Helper function to handle API responses\nasync function handleResponse(response) {\n    const contentType = response.headers.get('content-type');\n    console.log(\"\\uD83D\\uDCE1 Response: \".concat(response.status, \" \").concat(response.statusText, \", Content-Type: \").concat(contentType));\n    if (contentType && contentType.includes('application/json')) {\n        try {\n            const data = await response.json();\n            if (!response.ok) {\n                const errorObj = {\n                    status: response.status,\n                    statusText: response.statusText,\n                    message: data.message || data.error || 'API request failed',\n                    responseData: data,\n                    url: response.url\n                };\n                console.error('❌ API Error (JSON):', errorObj);\n                throw errorObj;\n            }\n            return data;\n        } catch (jsonError) {\n            if (!response.ok) {\n                const errorObj = {\n                    status: response.status,\n                    statusText: response.statusText,\n                    message: \"Failed to parse JSON response: \".concat(jsonError),\n                    responseData: null,\n                    url: response.url\n                };\n                console.error('❌ API Error (JSON Parse Failed):', errorObj);\n                throw errorObj;\n            }\n            throw jsonError;\n        }\n    }\n    try {\n        const text = await response.text();\n        console.log(\"\\uD83D\\uDCC4 Response text (first 200 chars): \".concat(text.substring(0, 200)));\n        if (!response.ok) {\n            const errorObj = {\n                status: response.status,\n                statusText: response.statusText,\n                message: text || 'API request failed',\n                responseData: text,\n                url: response.url\n            };\n            console.error('❌ API Error (Text):', errorObj);\n            throw errorObj;\n        }\n        return text;\n    } catch (textError) {\n        const errorObj = {\n            status: response.status,\n            statusText: response.statusText,\n            message: \"Failed to read response: \".concat(textError),\n            responseData: null,\n            url: response.url\n        };\n        console.error('❌ API Error (Text Read Failed):', errorObj);\n        throw errorObj;\n    }\n}\n// ✅ פונקציה לקבלת טוקן - תמיד מlocalStorage (פשוט יותר)\nfunction getAuthToken() {\n    if (true) {\n        return localStorage.getItem('token');\n    }\n    return null;\n}\n// ✅ Main API call function - גישה היברידית\nasync function apiCall(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (!endpoint.startsWith('/')) {\n        endpoint = '/' + endpoint;\n    }\n    // ✅ הכן headers\n    const token = getAuthToken();\n    const headers = {\n        'Content-Type': 'application/json',\n        ...options.headers\n    };\n    // ✅ הוסף Authorization header אם יש טוקן\n    if (token) {\n        headers['Authorization'] = \"Bearer \".concat(token);\n    }\n    const fullUrl = \"\".concat(API_URL).concat(endpoint);\n    console.log(\"\\uD83D\\uDE80 Making API call to: \".concat(fullUrl), {\n        hasToken: !!token,\n        environment: \"development\"\n    });\n    try {\n        const response = await fetch(fullUrl, {\n            ...options,\n            headers,\n            credentials: 'include' // עדיין כולל cookies לפיתוח מקומי\n        });\n        return await handleResponse(response);\n    } catch (error) {\n        console.error(\"\\uD83D\\uDCA5 API call failed for \".concat(endpoint, \":\"), {\n            url: fullUrl,\n            error: error,\n            errorMessage: error instanceof Error ? error.message : 'Unknown error',\n            headers: headers\n        });\n        if (error && typeof error === 'object') {\n            error.endpoint = endpoint;\n            error.fullUrl = fullUrl;\n        }\n        throw error;\n    }\n}\nasync function authenticatedApiCall(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return apiCall(endpoint, options);\n}\nasync function healthCheck() {\n    return apiCall('/health');\n}\n// Authentication endpoints\nconst authEndpoints = {\n    login: async (credentials)=>apiCall('/auth/login', {\n            method: 'POST',\n            body: JSON.stringify(credentials)\n        }),\n    register: async (userData)=>apiCall('/auth/register', {\n            method: 'POST',\n            body: JSON.stringify(userData)\n        }),\n    validate: async ()=>apiCall('/auth/validate', {\n            method: 'POST',\n            body: JSON.stringify({})\n        }),\n    logout: async ()=>apiCall('/auth/logout', {\n            method: 'POST'\n        })\n};\n// User endpoints\nconst userEndpoints = {\n    getProfile: async ()=>apiCall('/user/profile'),\n    updateProfile: async (data)=>apiCall('/user/profile', {\n            method: 'PUT',\n            body: JSON.stringify(data)\n        }),\n    getData: async ()=>apiCall('/user/data')\n};\n// Topics endpoints\nconst topicsEndpoints = {\n    getAll: async ()=>apiCall('/topics'),\n    getById: async (id)=>apiCall(\"/topics/\".concat(id)),\n    getUserProgress: async ()=>apiCall('/topics/progress')\n};\n// Task endpoints  \nconst taskEndpoints = {\n    create: async (taskData)=>apiCall('/tasks', {\n            method: 'POST',\n            body: JSON.stringify(taskData)\n        }),\n    getById: async (taskId)=>apiCall(\"/tasks/\".concat(taskId)),\n    update: async (taskId, updateData)=>apiCall(\"/tasks/\".concat(taskId), {\n            method: 'PUT',\n            body: JSON.stringify(updateData)\n        }),\n    getUserTasks: async (userId)=>apiCall(\"/tasks/user/\".concat(userId))\n};\n// ✅ Flashcard endpoints\nconst flashcardEndpoints = {\n    getByTopicAndLevel: async (topic, level)=>{\n        try {\n            console.log('\\uD83D\\uDE80 Fetching flashcards: topic=\"'.concat(topic, '\", level=\"').concat(level, '\"'));\n            const result = await apiCall(\"/flashcards/\".concat(encodeURIComponent(topic), \"/\").concat(level));\n            if (result && result.success) {\n                console.log(\"✅ Received \".concat(result.data.length, \" flashcards\"));\n                return result.data;\n            } else if (Array.isArray(result)) {\n                console.log(\"✅ Received \".concat(result.length, \" flashcards (direct array)\"));\n                return result;\n            } else {\n                console.error('❌ Unexpected response format:', result);\n                throw new Error('Invalid response format from flashcards API');\n            }\n        } catch (error) {\n            console.error('❌ Error fetching flashcards:', error);\n            throw error;\n        }\n    },\n    create: async (flashcardData)=>apiCall('/flashcards', {\n            method: 'POST',\n            body: JSON.stringify(flashcardData)\n        }),\n    markAsLearned: async (wordId, taskId, topicName)=>apiCall('/flashcards/mark-learned', {\n            method: 'POST',\n            body: JSON.stringify({\n                WordId: wordId,\n                TaskId: taskId,\n                TopicName: topicName\n            })\n        })\n};\n// Words endpoints\nconst wordsEndpoints = {\n    getUnlearned: async function(topic, level) {\n        let randomLimit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 20;\n        try {\n            console.log('\\uD83D\\uDE80 Fetching unlearned words: topic=\"'.concat(topic, '\", level=\"').concat(level, '\"'));\n            const result = await apiCall(\"/words?topic=\".concat(encodeURIComponent(topic), \"&level=\").concat(level, \"&randomLimit=\").concat(randomLimit, \"&filterLearned=true\"));\n            console.log(\"✅ Received \".concat(Array.isArray(result) ? result.length : 0, \" unlearned words\"));\n            return result;\n        } catch (error) {\n            console.error('❌ Error fetching unlearned words:', error);\n            throw error;\n        }\n    },\n    getLearned: async (topic, level)=>{\n        const params = new URLSearchParams();\n        if (topic) params.append('topic', topic);\n        if (level) params.append('level', level.toString());\n        return apiCall(\"/words/learned?\".concat(params.toString()));\n    },\n    getInTask: async (taskId)=>apiCall(\"/words/in-task?taskId=\".concat(taskId)),\n    addToTask: async (taskId, wordIds)=>apiCall('/words/to-task', {\n            method: 'POST',\n            body: JSON.stringify({\n                taskId,\n                wordIds\n            })\n        })\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    apiCall,\n    authenticatedApiCall,\n    healthCheck,\n    auth: authEndpoints,\n    user: userEndpoints,\n    topics: topicsEndpoints,\n    tasks: taskEndpoints,\n    flashcards: flashcardEndpoints,\n    words: wordsEndpoints\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/config/api.ts\n"));

/***/ })

});